from fastapi import APIRouter, UploadFile, File, HTTPException, Depends
from sqlalchemy.orm import Session
from services.minio_service import download_from_minio
from database import get_db
from schemas import AlertCreate
from services.alerts import create_alert
from utils.logger import logger
from ml.pipeline import analyze_video_pipeline
import shutil
import os

router = APIRouter(prefix="/videos", tags=["Videos"])

UPLOAD_DIR = "uploads"
os.makedirs(UPLOAD_DIR, exist_ok=True)
ALLOWED_EXTENSIONS = {".mp4", ".avi", ".mov", ".mkv"}


@router.post("/upload")
async def upload_video(file: UploadFile = File(...)):
    """üì• –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É"""
    file_ext = os.path.splitext(file.filename)[1].lower()
    if file_ext not in ALLOWED_EXTENSIONS:
        raise HTTPException(status_code=400, detail="‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞!")

    file_path = os.path.join(UPLOAD_DIR, file.filename)

    try:
        with open(file_path, "wb") as buffer:
            shutil.copyfileobj(file.file, buffer)

        logger.info(f"‚úÖ –í–∏–¥–µ–æ {file.filename} –∑–∞–≥—Ä—É–∂–µ–Ω–æ.")
        return {"filename": file.filename, "path": file_path}

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ.")


@router.post("/analyze")
def analyze(video_filename: str, db: Session = Depends(get_db)):
    """
    üé¨ –ê–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ:
    - —Å–∫–∞—á–∏–≤–∞–µ—Ç –∏–∑ MinIO
    - –ø—Ä–∏–º–µ–Ω—è–µ—Ç YOLOv8 + MoViNet
    - –≤—ã–∑—ã–≤–∞–µ—Ç —Ç—Ä–µ–≤–æ–≥—É –ø—Ä–∏ –¥–µ–≤–∏–∞—Ü–∏–∏
    """
    try:
        local_path = download_from_minio(video_filename)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ MinIO: {str(e)}")
        raise HTTPException(status_code=404, detail="–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    actions = analyze_video_pipeline(local_path)

    for action in actions:
        if action in ["fighting", "falling", "loitering"]:
            create_alert(
                db, AlertCreate(type="suspicious", description=f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {action}")
            )

    return {"video": video_filename, "actions": actions}
