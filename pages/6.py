# pages/6_–î—ã–±—ã—Å—Ç—ã“õ_–ê–Ω–æ–º–∞–ª–∏—è–ª–∞—Ä–¥—ã_–ê–Ω—ã“õ—Ç–∞—É.py

import streamlit as st
import numpy as np
import sys
import os
import time
from st_audiorec import st_audiorec # streamlit-audio-recorder –∏–º–ø–æ—Ä—Ç—ã
import librosa # –ê—É–¥–∏–æ–Ω—ã “õ–∞–π—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç—Ç–µ—É –∂”ô–Ω–µ WAV –±–∞–π—Ç—Ç–∞—Ä—ã–Ω ”©“£–¥–µ—É “Ø—à—ñ–Ω
import io # –ë–∞–π—Ç—Ç–∞—Ä–º–µ–Ω –∂“±–º—ã—Å —ñ—Å—Ç–µ—É “Ø—à—ñ–Ω

# –ñ–æ–±–∞–Ω—ã“£ —Ç“Ø–±—ñ—Ä–ª—ñ–∫ –±—É–º–∞—Å—ã–Ω sys.path-“õ–∞ “õ–æ—Å—É
PROJECT_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
if PROJECT_ROOT not in sys.path:
    sys.path.append(PROJECT_ROOT)

# –ú–æ–¥–µ–ª—å–¥–µ—Ä –º–µ–Ω —Ä–µ—Å—É—Ä—Å—Ç–∞—Ä“ì–∞ –∂–æ–ª–¥–∞—Ä
MODEL_DIR = os.path.join(PROJECT_ROOT, "ml_models")
YAMNET_MODEL_PATH = os.path.join(MODEL_DIR, "yamnet.tflite")
YAMNET_CLASS_MAP_PATH = os.path.join(MODEL_DIR, "yamnet_class_map.csv")
ALARM_SOUND_PATH = os.path.join(PROJECT_ROOT, "static_assets", "alarm.wav")

# SoundAnomalyDetector –∫–ª–∞—Å—ã–Ω –∏–º–ø–æ—Ä—Ç—Ç–∞—É
SoundAnomalyDetector_class_to_use = None
import_error_details = None
_successfully_imported_real_detector = False
YAMNET_EXPECTED_SAMPLE_RATE_DEFAULT = 16000
YAMNET_EXPECTED_SAMPLE_RATE = YAMNET_EXPECTED_SAMPLE_RATE_DEFAULT

try:
    from ml.sound_anomaly_detector import SoundAnomalyDetector, YAMNET_EXPECTED_SAMPLE_RATE as YAMNET_SR_FROM_MODULE
    SoundAnomalyDetector_class_to_use = SoundAnomalyDetector
    YAMNET_EXPECTED_SAMPLE_RATE = YAMNET_SR_FROM_MODULE
    _successfully_imported_real_detector = True
except ImportError as e_imp:
    import_error_details = f"SoundAnomalyDetector –∫–ª–∞—Å—ã–Ω ml.sound_anomaly_detector —Ñ–∞–π–ª—ã–Ω–∞–Ω –∏–º–ø–æ—Ä—Ç—Ç–∞—É “õ–∞—Ç–µ—Å—ñ: {e_imp}. TensorFlow/TFLite runtime –æ—Ä–Ω–∞—Ç—ã–ª“ì–∞–Ω—ã–Ω–∞ –∫”©–∑ –∂–µ—Ç–∫—ñ–∑—ñ“£—ñ–∑."
except Exception as e_gen:
    import_error_details = f"SoundAnomalyDetector –∫–ª–∞—Å—ã–Ω –∏–º–ø–æ—Ä—Ç—Ç–∞—É –∫–µ–∑—ñ–Ω–¥–µ –ë–ê–°“ö–ê “õ–∞—Ç–µ: {e_gen}. ml/sound_anomaly_detector.py —Ñ–∞–π–ª—ã–Ω —Ç–µ–∫—Å–µ—Ä—ñ“£—ñ–∑."

# --- Streamlit –±–µ—Ç—ñ–Ω—ñ“£ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Å—ã (–±—ñ—Ä—ñ–Ω—à—ñ –∫–æ–º–∞–Ω–¥–∞) ---
st.set_page_config(page_title="–î—ã–±—ã—Å—Ç—ã“õ –ê–Ω–æ–º–∞–ª–∏—è–ª–∞—Ä–¥—ã –ê–Ω—ã“õ—Ç–∞—É", layout="wide", initial_sidebar_state="expanded")

# --- –ò–º–ø–æ—Ä—Ç “õ–∞—Ç–µ–ª–µ—Ä—ñ–Ω –∫”©—Ä—Å–µ—Ç—É –∂”ô–Ω–µ —Ç—ã“ì—ã–Ω –∫–ª–∞—Å—ã–Ω –∞–Ω—ã“õ—Ç–∞—É ---
if import_error_details:
    st.error(import_error_details)

class DummySoundAnomalyDetectorForPage6:
    def __init__(self, *args, **kwargs):
        if not _successfully_imported_real_detector:
            st.warning("–ù–ê–ó–ê–† –ê–£–î–ê–†–´“¢–´–ó: SoundAnomalyDetector –¢–´“í–´–ù–´ “õ–æ–ª–¥–∞–Ω—ã–ª—É–¥–∞!")
        st.info(f"SoundAnomalyDetector —Ç—ã“ì—ã–Ω—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–ª–∞–Ω–¥—ã.")
        self.model = True # –ú–æ–¥–µ–ª—å–¥—ñ“£ –±–∞—Ä –µ–∫–µ–Ω—ñ–Ω –∏–º–∏—Ç–∞—Ü–∏—è–ª–∞—É
        self.detection_threshold = kwargs.get('detection_threshold', 0.3)

    def process_audio_chunk(self, chunk, sr):
        time.sleep(0.1)
        return [f"–¢—ã“ì—ã–Ω: –æ“õ–∏“ì–∞ {int(time.time() % 5)} (—Å–µ–Ω—ñ–º–¥—ñ–ª—ñ–∫: {self.detection_threshold:.2f})"]
    def close(self):
        st.info("SoundAnomalyDetector —Ç—ã“ì—ã–Ω—ã–Ω—ã“£ close ”ô–¥—ñ—Å—ñ —à–∞“õ—ã—Ä—ã–ª–¥—ã.")
    def _log_to_ui(self, message):
        log_key = 'sound_detector_debug_log_page6'
        if log_key not in st.session_state: st.session_state[log_key] = []
        st.session_state[log_key].insert(0, f"{time.strftime('%H:%M:%S')} - DUMMY: {message}")
        st.session_state[log_key] = st.session_state[log_key][:30]

if not _successfully_imported_real_detector:
    SoundAnomalyDetector_class_to_use = DummySoundAnomalyDetectorForPage6

# --- –ú–µ—Ç—Ä–∏–∫–∞ –∫—ñ–ª—Ç—Ç–µ—Ä—ñ–Ω –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–ª–∞—É ---
METRICS_AUDIO_CHUNKS_KEY_SOUND = 'metrics_audio_chunks_processed_sound_pg6'
METRICS_DETECTIONS_KEY_SOUND = 'metrics_sounds_detected_counts_pg6' # –°”©–∑–¥—ñ–∫ “Ø—à—ñ–Ω

if METRICS_AUDIO_CHUNKS_KEY_SOUND not in st.session_state:
    st.session_state[METRICS_AUDIO_CHUNKS_KEY_SOUND] = 0
if METRICS_DETECTIONS_KEY_SOUND not in st.session_state:
    st.session_state[METRICS_DETECTIONS_KEY_SOUND] = {}

# --- “ö–æ—Å—ã–º—à–∞–Ω—ã“£ –Ω–µ–≥—ñ–∑–≥—ñ UI –±”©–ª—ñ–≥—ñ ---
st.title("–ú–æ–¥—É–ª—å : –î—ã–±—ã—Å—Ç—ã“õ –ê–Ω–æ–º–∞–ª–∏—è–ª–∞—Ä–¥—ã –ê–Ω—ã“õ—Ç–∞—É (YAMNet)")
st.markdown("–ú–∏–∫—Ä–æ—Ñ–æ–Ω–Ω–∞–Ω –Ω–∞“õ—Ç—ã —É–∞“õ—ã—Ç—Ç–∞ –¥—ã–±—ã—Å—Ç–∞—Ä–¥—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è–ª–∞—É “Ø—à—ñ–Ω YAMNet –º–æ–¥–µ–ª—ñ–Ω “õ–æ–ª–¥–∞–Ω–∞–¥—ã.")

model_files_ok_sound = True
if not os.path.exists(YAMNET_MODEL_PATH):
    st.error(f"YAMNet –º–æ–¥–µ–ª—ñ–Ω—ñ“£ —Ñ–∞–π–ª—ã —Ç–∞–±—ã–ª–º–∞–¥—ã: {YAMNET_MODEL_PATH}")
    model_files_ok_sound = False
if not os.path.exists(YAMNET_CLASS_MAP_PATH):
    st.error(f"YAMNet –∫–ª–∞—Å—Å –∫–∞—Ä—Ç–∞—Å—ã–Ω—ã“£ —Ñ–∞–π–ª—ã —Ç–∞–±—ã–ª–º–∞–¥—ã: {YAMNET_CLASS_MAP_PATH}")
    model_files_ok_sound = False


st.sidebar.title("–ú–û–î–£–õ–¨–î–ï–†") # –í–∞—à –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
st.sidebar.markdown("---")
sidebar_pages = {
    "–ë–∞—Å—Ç—ã –±–µ—Ç": "app.py", # –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–º—É —Å–µ–±—è
    "1. “ö“±–ª–∞—É–¥—ã –ê–Ω—ã“õ—Ç–∞—É": "pages/1.py", # –ò–ª–∏ pages/1_“ö“±–ª–∞—É–¥—ã_–ê–Ω—ã“õ—Ç–∞—É.py
    "2. –¢”©–±–µ–ª–µ—Å—Ç—ñ –ê–Ω—ã“õ—Ç–∞—É": "pages/2.py", # –ò–ª–∏ pages/2_02_–ú–û–î–£–õ–¨.py
    "3. –≠–º–æ—Ü–∏—è–ª–∞—Ä–¥—ã –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è–ª–∞—É": "pages/3.py",
    "4. –ö”©–º–µ–∫ –°–∏–≥–Ω–∞–ª—ã": "pages/4.py",
    "5. “ö–∞—Ä—É–¥—ã –ê–Ω—ã“õ—Ç–∞—É": "pages/5.py",
    "6. –î—ã–±—ã—Å—Ç—ã“õ –ê–Ω–æ–º–∞–ª–∏—è–ª–∞—Ä": "pages/6.py",
}

for page_label, page_file_path in sidebar_pages.items():
    if os.path.exists(page_file_path.replace("/", os.sep)) or page_file_path == "app.py":
        st.sidebar.page_link(page_file_path, label=page_label)
    else:
        st.sidebar.caption(f"{page_label} (–±–µ—Ç —Ç–∞–±—ã–ª–º–∞–¥—ã: {page_file_path})")
st.sidebar.markdown("---")
st.sidebar.subheader("–ê—É–¥–∏–æ–∂–∞–∑–±–∞ –ë–∞—Å“õ–∞—Ä—É")
# –î–µ—Ç–µ–∫—Ç–æ—Ä–¥—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–ª–∞—É
detector_session_key_sound = 'sound_anomaly_detector_instance_page6_v2' # –ö—ñ–ª—Ç—Ç—ñ –∂–∞“£–∞—Ä—Ç—Ç—ã“õ
detection_threshold_slider_val_pg6 = st.sidebar.slider(
    "–î—ã–±—ã—Å —Å–µ–Ω—ñ–º–¥—ñ–ª—ñ–∫ —à–µ–≥—ñ", 0.0, 1.0, 0.3, 0.05, key="sound_thresh_slider_pg6_v2"
)

if detector_session_key_sound not in st.session_state:
    if _successfully_imported_real_detector and model_files_ok_sound and SoundAnomalyDetector_class_to_use:
        custom_target_anomalies_map_sound = {
            "Scream": "–ê–ô“ö–ê–ô!", "Shout": "“ö–ê–¢–¢–´ –ê–ô“ö–ê–ô/–®–ê“ö–´–†–£!", "Yell": "–ë–ê“ö–´–†–£!",
            "Child crying": "–ë–ê–õ–ê –ñ–´–õ–ê–£–´!", "Glass": "–®–´–ù–´ –°–´–ù“í–ê–ù –î–´–ë–´–°!",
            "Gunshot, gunfire": "–ê–¢–´–° –î–´–ë–´–°–´!", "Explosion": "–ñ–ê–†–´–õ–´–°!",
            "Alarm": "–î–ê–ë–´–õ –°–ò–ì–ù–ê–õ–´ (–¥—ã–±—ã—Å)", "Siren": "–°–ò–†–ï–ù–ê"
        }
        st.session_state[detector_session_key_sound] = SoundAnomalyDetector_class_to_use(
            model_path=YAMNET_MODEL_PATH,
            class_map_path=YAMNET_CLASS_MAP_PATH,
            target_anomalies=custom_target_anomalies_map_sound,
            detection_threshold=detection_threshold_slider_val_pg6 # –°–ª–∞–π–¥–µ—Ä–¥–µ–Ω –∞–ª—É
        )
    elif SoundAnomalyDetector_class_to_use: # –¢—ã“ì—ã–Ω –∫–ª–∞—Å—ã “õ–æ–ª–¥–∞–Ω—ã–ª—Å–∞
        st.session_state[detector_session_key_sound] = SoundAnomalyDetector_class_to_use(
            detection_threshold=detection_threshold_slider_val_pg6
        )

# –î–µ—Ç–µ–∫—Ç–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–Ω –∂–∞“£–∞—Ä—Ç—É, –µ–≥–µ—Ä —Å–ª–∞–π–¥–µ—Ä ”©–∑–≥–µ—Ä—Å–µ
sound_detector_instance = st.session_state.get(detector_session_key_sound)
if sound_detector_instance and hasattr(sound_detector_instance, 'detection_threshold') and \
   sound_detector_instance.detection_threshold != detection_threshold_slider_val_pg6:
    sound_detector_instance.detection_threshold = detection_threshold_slider_val_pg6
    if _successfully_imported_real_detector:
        sound_detector_instance._log_to_ui(f"–î–µ—Ç–µ–∫—Ç–æ—Ä–¥—ã“£ —Å–µ–Ω—ñ–º–¥—ñ–ª—ñ–∫ —à–µ–≥—ñ –∂–∞“£–∞—Ä—Ç—ã–ª–¥—ã: {detection_threshold_slider_val_pg6}")


# st_audiorec –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–Ω –ø–∞–π–¥–∞–ª–∞–Ω—É
st.write("–î—ã–±—ã—Å—Ç—ã –∂–∞–∑—É “Ø—à—ñ–Ω —Ç”©–º–µ–Ω–¥–µ–≥—ñ —Ç“Ø–π–º–µ–Ω—ñ –±–∞—Å—ã“£—ã–∑, —Å–æ–¥–∞–Ω –∫–µ–π—ñ–Ω —Ç–∞–ª–¥–∞—É “Ø—à—ñ–Ω —Ç–æ“õ—Ç–∞—Ç—ã“£—ã–∑.")
audio_bytes = st_audiorec() # –ë“±–ª –≤–∏–¥–∂–µ—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω–¥—ã —ñ—Å–∫–µ “õ–æ—Å–∞–¥—ã –∂”ô–Ω–µ –∂–∞–∑—ã–ª“ì–∞–Ω –±–∞–π—Ç—Ç–∞—Ä–¥—ã “õ–∞–π—Ç–∞—Ä–∞–¥—ã

detected_anomalies_display_sound = st.empty()
alarm_sound_played_sound_pg6 = st.session_state.get('alarm_played_sound_pg6', False)

if audio_bytes:
    st.audio(audio_bytes, format="audio/wav")
    st.info("–ê—É–¥–∏–æ –∂–∞–∑—ã–ª–¥—ã, —Ç–∞–ª–¥–∞—É –∂“Ø—Ä–≥—ñ–∑—ñ–ª—É–¥–µ...")
    
    sound_detector = st.session_state.get(detector_session_key_sound)
    if sound_detector:
        try:
            # librosa WAV –±–∞–π—Ç—Ç–∞—Ä—ã–Ω –æ“õ—É “Ø—à—ñ–Ω
            # streamlit-audio-recorder WAV —Ñ–æ—Ä–º–∞—Ç—ã–Ω–¥–∞ “õ–∞–π—Ç–∞—Ä–∞–¥—ã
            audio_np, sr = librosa.load(io.BytesIO(audio_bytes), sr=None, mono=True) # sr=None —Ç“Ø–ø–Ω“±—Å“õ–∞ –∂–∏—ñ–ª—ñ–∫—Ç—ñ –∞–ª—É “Ø—à—ñ–Ω
            
            # –ú–µ—Ç—Ä–∏–∫–∞: ”©“£–¥–µ–ª–≥–µ–Ω –∞—É–¥–∏–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—Ç–µ—Ä
            st.session_state[METRICS_AUDIO_CHUNKS_KEY_SOUND] += 1

            # –ê—É–¥–∏–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—Ç—ñ ”©“£–¥–µ—É
            detected_anomalies = sound_detector.process_audio_chunk(audio_np, sr)

            if detected_anomalies:
                anomalies_str = ", ".join(detected_anomalies)
                detected_anomalies_display_sound.error(f"üö® –ê–Ω–æ–º–∞–ª–∏—è–ª–∞—Ä –∞–Ω—ã“õ—Ç–∞–ª–¥—ã: {anomalies_str}")
                
                # –ú–µ—Ç—Ä–∏–∫–∞: –∞–Ω—ã“õ—Ç–∞–ª“ì–∞–Ω –¥—ã–±—ã—Å—Ç—ã“õ –∞–Ω–æ–º–∞–ª–∏—è–ª–∞—Ä
                current_sound_counts = st.session_state.get(METRICS_DETECTIONS_KEY_SOUND, {})
                for anomaly_full_str in detected_anomalies:
                    # –¢–µ–∫ —Ç–∞–∑–∞ –∞—Ç–∞—É—ã–Ω –∞–ª—É (—Å–µ–Ω—ñ–º–¥—ñ–ª—ñ–∫—Å—ñ–∑)
                    anomaly_name = anomaly_full_str.split(' (')[0] 
                    current_sound_counts[anomaly_name] = current_sound_counts.get(anomaly_name, 0) + 1
                st.session_state[METRICS_DETECTIONS_KEY_SOUND] = current_sound_counts
                
                if not alarm_sound_played_sound_pg6:
                    if os.path.exists(ALARM_SOUND_PATH):
                        try:
                            with open(ALARM_SOUND_PATH, "rb") as audio_file_bytes_main:
                                st.audio(audio_file_bytes_main.read(), format="audio/wav", start_time=0)
                            st.toast("üé∂ –î–∞–±—ã–ª —Å–∏–≥–Ω–∞–ª—ã –æ–π–Ω–∞—Ç—ã–ª—É–¥–∞ (–¥—ã–±—ã—Å)!", icon="üö®")
                        except Exception as e_audio_main_thread:
                            st.warning(f"–î—ã–±—ã—Å—Ç—ã –æ–π–Ω–∞—Ç—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã: {e_audio_main_thread}")
                    else:
                        st.warning(f"–î–∞–±—ã–ª –¥—ã–±—ã—Å—ã —Ñ–∞–π–ª—ã —Ç–∞–±—ã–ª–º–∞–¥—ã: {ALARM_SOUND_PATH}")
                    st.session_state.alarm_played_sound_pg6 = True # –ë—ñ—Ä —Ä–µ—Ç –æ–π–Ω–∞—Ç—É
            else:
                detected_anomalies_display_sound.success("–ñ–∞–∑—ã–ª“ì–∞–Ω –∞—É–¥–∏–æ–¥–∞ –∞–Ω–æ–º–∞–ª–∏—è–ª–∞—Ä –∞–Ω—ã“õ—Ç–∞–ª–º–∞–¥—ã.")
                st.session_state.alarm_played_sound_pg6 = False # –ï–≥–µ—Ä –∞–Ω–æ–º–∞–ª–∏—è –∂–æ“õ –±–æ–ª—Å–∞, –¥–∞–±—ã–ª–¥—ã “õ–∞–π—Ç–∞ “õ–æ—Å—É“ì–∞ –±–æ–ª–∞–¥—ã
        except Exception as e:
            st.error(f"–ê—É–¥–∏–æ–Ω—ã ”©“£–¥–µ—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ: {e}")
            detected_anomalies_display_sound.empty()
            st.session_state.alarm_played_sound_pg6 = False
    else:
        st.error("–î—ã–±—ã—Å –¥–µ—Ç–µ–∫—Ç–æ—Ä—ã –∂“Ø–∫—Ç–µ–ª–º–µ–≥–µ–Ω.")
        detected_anomalies_display_sound.empty()
        st.session_state.alarm_played_sound_pg6 = False
else:
    detected_anomalies_display_sound.info("–ê–Ω–æ–º–∞–ª–¥—ã –¥—ã–±—ã—Å—Ç–∞—Ä–¥—ã –∞–Ω—ã“õ—Ç–∞—É “Ø—à—ñ–Ω –∞—É–¥–∏–æ –∂–∞–∑—ã“£—ã–∑.")
    st.session_state.alarm_played_sound_pg6 = False



st.markdown("---")
st.subheader("–ú–æ–¥—É–ª—å –°–∏–ø–∞—Ç—Ç–∞–º–∞—Å—ã:")
st.markdown("""
- –ú–∏–∫—Ä–æ—Ñ–æ–Ω–Ω–∞–Ω –∂–∞–∑—ã–ª“ì–∞–Ω –¥—ã–±—ã—Å—Ç—ã“õ –æ“õ–∏“ì–∞–ª–∞—Ä–¥—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è–ª–∞—É “Ø—à—ñ–Ω **YAMNet** (TensorFlow Lite –º–æ–¥–µ–ª—ñ) “õ–æ–ª–¥–∞–Ω–∞–¥—ã.
- –´“õ—Ç–∏–º–∞–ª –∞–Ω–æ–º–∞–ª–¥—ã –¥—ã–±—ã—Å—Ç–∞—Ä–¥—ã (–∞–π“õ–∞–π, —à—ã–Ω—ã —Å—ã–Ω—É—ã, –∞—Ç—ã—Å —Ç.–±.) –∞–Ω—ã“õ—Ç–∞–ø, –∫”©—Ä—Å–µ—Ç–µ–¥—ñ.
- **–ñ“±–º—ã—Å —ñ—Å—Ç–µ—É “Ø—à—ñ–Ω –º–∏–∫—Ä–æ—Ñ–æ–Ω“ì–∞ —Ä“±“õ—Å–∞—Ç “õ–∞–∂–µ—Ç.** `streamlit-audio-recorder` –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ –∞—É–¥–∏–æ –∂–∞–∑—É “Ø—à—ñ–Ω –º–∏–∫—Ä–æ—Ñ–æ–Ω–¥—ã –ø–∞–π–¥–∞–ª–∞–Ω–∞–¥—ã.
- **–î”ô–ª–¥—ñ–∫ YAMNet –º–æ–¥–µ–ª—ñ–Ω—ñ“£ —Å–∞–ø–∞—Å—ã–Ω–∞ –∂”ô–Ω–µ “õ–æ—Ä—à–∞“ì–∞–Ω –æ—Ä—Ç–∞–¥–∞“ì—ã —à—É –¥–µ“£–≥–µ–π—ñ–Ω–µ –±–∞–π–ª–∞–Ω—ã—Å—Ç—ã.**
""")