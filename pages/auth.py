# pages/00_–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.py
import streamlit as st
import sys
import os

PROJECT_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
if PROJECT_ROOT not in sys.path:
    sys.path.append(PROJECT_ROOT)

try:
    from utils.auth_utils import verify_password, get_user_by_username, create_db_user, get_db_session, create_tables
    AUTH_UTILS_AVAILABLE = True
except ImportError as e:
    st.error(f"–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Ç–∏–ª–∏—Ç–∞–ª–∞—Ä—ã–Ω –∏–º–ø–æ—Ä—Ç—Ç–∞—É “õ–∞—Ç–µ—Å—ñ: {e}. utils/auth_utils.py —Ñ–∞–π–ª—ã–Ω —Ç–µ–∫—Å–µ—Ä—ñ“£—ñ–∑.")
    AUTH_UTILS_AVAILABLE = False

# Streamlit –±–µ—Ç—ñ–Ω—ñ“£ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Å—ã
st.set_page_config(page_title="–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", layout="centered", initial_sidebar_state="collapsed")

if AUTH_UTILS_AVAILABLE and 'db_tables_created_auth_page' not in st.session_state:
    try:
        create_tables()
        st.session_state.db_tables_created_auth_page = True
        # st.toast("–î–µ—Ä–µ–∫“õ–æ—Ä –∫–µ—Å—Ç–µ–ª–µ—Ä—ñ —Ç–µ–∫—Å–µ—Ä—ñ–ª–¥—ñ/“õ“±—Ä—ã–ª–¥—ã.")
    except Exception as e_db:
        st.error(f"–î–µ—Ä–µ–∫“õ–æ—Ä –∫–µ—Å—Ç–µ–ª–µ—Ä—ñ–Ω “õ“±—Ä—É “õ–∞—Ç–µ—Å—ñ: {e_db}")


# –°–µ—Å—Å–∏—è –∫“Ø–π—ñ–Ω–¥–µ –∫—ñ—Ä—É —Å—Ç–∞—Ç—É—Å—ã–Ω –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–ª–∞—É
if 'logged_in' not in st.session_state:
    st.session_state.logged_in = False
if 'username' not in st.session_state:
    st.session_state.username = None
if 'login_error' not in st.session_state:
    st.session_state.login_error = None
if 'register_message' not in st.session_state:
    st.session_state.register_message = None


def handle_login(username_login, password_login, db_session):
    user = get_user_by_username(db_session, username_login)
    if user and verify_password(password_login, user.password_hash):
        st.session_state.logged_in = True
        st.session_state.username = username_login
        st.session_state.login_error = None
        st.session_state.register_message = None # –ë–∞—Å“õ–∞ —Ö–∞–±–∞—Ä–ª–∞–º–∞–ª–∞—Ä–¥—ã —Ç–∞–∑–∞–ª–∞—É
        st.success(f"–°”ô—Ç—Ç—ñ –∫—ñ—Ä–¥—ñ“£—ñ–∑, {username_login}!")
        st.rerun() # –ë–∞—Å—Ç—ã –±–µ—Ç–∫–µ –Ω–µ–º–µ—Å–µ –±–∞—Å“õ–∞ –±–µ—Ç–∫–µ ”©—Ç—É “Ø—à—ñ–Ω (–Ω–µ–º–µ—Å–µ UI –∂–∞“£–∞—Ä—Ç—É)
    else:
        st.session_state.login_error = "“ö–∞—Ç–µ –ª–æ–≥–∏–Ω –Ω–µ–º–µ—Å–µ “õ“±–ø–∏—è —Å”©–∑."
        st.rerun()

def handle_registration(username_reg, password_reg, password_confirm_reg, db_session):
    if password_reg != password_confirm_reg:
        st.session_state.register_message = {"error": "“ö“±–ø–∏—è —Å”©–∑–¥–µ—Ä —Å”ô–π–∫–µ—Å –∫–µ–ª–º–µ–π–¥—ñ."}
        st.rerun()
        return
    if len(password_reg) < 6: # “ö–∞—Ä–∞–ø–∞–π—ã–º —Ç–µ–∫—Å–µ—Ä—É
        st.session_state.register_message = {"error": "“ö“±–ø–∏—è —Å”©–∑ –∫–µ–º –¥–µ–≥–µ–Ω–¥–µ 6 —Ç–∞“£–±–∞–¥–∞–Ω —Ç“±—Ä—É—ã –∫–µ—Ä–µ–∫."}
        st.rerun()
        return

    user = create_db_user(db_session, username_reg, password_reg)
    if user:
        st.session_state.register_message = {"success": f"{username_reg} –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã—Å—ã —Å”ô—Ç—Ç—ñ —Ç—ñ—Ä–∫–µ–ª–¥—ñ! –ï–Ω–¥—ñ –∂“Ø–π–µ–≥–µ –∫—ñ—Ä–µ –∞–ª–∞—Å—ã–∑."}
    else:
        st.session_state.register_message = {"error": f"{username_reg} –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã—Å—ã –±“±—Ä—ã–Ω–Ω–∞–Ω –±–∞—Ä –Ω–µ–º–µ—Å–µ –±–∞—Å“õ–∞ “õ–∞—Ç–µ."}
    st.rerun()

# –ï–≥–µ—Ä –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã –∂“Ø–π–µ–≥–µ –∫—ñ—Ä–≥–µ–Ω –±–æ–ª—Å–∞, –æ–Ω—ã –Ω–µ–≥—ñ–∑–≥—ñ –±–µ—Ç–∫–µ –±–∞“ì—ã—Ç—Ç–∞—É“ì–∞ –Ω–µ–º–µ—Å–µ –±–∞—Å“õ–∞ ”ô—Ä–µ–∫–µ—Ç –∂–∞—Å–∞—É“ì–∞ –±–æ–ª–∞–¥—ã.
# –ë“±–ª –±–µ—Ç—Ç—ñ“£ –º–∞“õ—Å–∞—Ç—ã - –∫—ñ—Ä—É/—Ç—ñ—Ä–∫–µ–ª—É —Ñ–æ—Ä–º–∞–ª–∞—Ä—ã–Ω –∫”©—Ä—Å–µ—Ç—É.
if st.session_state.logged_in:
    st.success(f"–°—ñ–∑ –∂“Ø–π–µ–≥–µ {st.session_state.username} –±–æ–ª—ã–ø –∫—ñ—Ä–¥—ñ“£—ñ–∑.")
    st.markdown("–ë–∞—Å—Ç—ã –±–µ—Ç–∫–µ ”©—Ç—É “Ø—à—ñ–Ω —Å–∞–π–¥–±–∞—Ä–¥—ã –ø–∞–π–¥–∞–ª–∞–Ω—ã“£—ã–∑ –Ω–µ–º–µ—Å–µ [–æ—Å—ã –∂–µ—Ä–¥—ñ –±–∞—Å—ã“£—ã–∑](app.py).") # app.py —Å—ñ–∑–¥—ñ“£ –Ω–µ–≥—ñ–∑–≥—ñ —Ñ–∞–π–ª—ã“£—ã–∑–¥—ã“£ –∞—Ç—ã
    if st.button("–®—ã“ì—É", key="logout_button_authpage"):
        st.session_state.logged_in = False
        st.session_state.username = None
        st.session_state.login_error = None
        st.session_state.register_message = None
        st.rerun()
else:
    st.title("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")

    if not AUTH_UTILS_AVAILABLE:
        st.error("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—ñ “õ–∞–∑—ñ—Ä “õ–æ–ª–∂–µ—Ç—ñ–º—Å—ñ–∑. –ò–º–ø–æ—Ä—Ç—Ç–∞—É “õ–∞—Ç–µ–ª–µ—Ä—ñ–Ω —Ç–µ–∫—Å–µ—Ä—ñ“£—ñ–∑.")
        st.stop()

    tab1, tab2 = st.tabs(["üîë –ö—ñ—Ä—É", "üìù –¢—ñ—Ä–∫–µ–ª—É"])

    with tab1:
        st.subheader("–ñ“Ø–π–µ–≥–µ –∫—ñ—Ä—É")
        with st.form("login_form"):
            username_login = st.text_input("–õ–æ–≥–∏–Ω", key="login_username")
            password_login = st.text_input("“ö“±–ø–∏—è —Å”©–∑", type="password", key="login_password")
            submitted_login = st.form_submit_button("–ö—ñ—Ä—É")

            if st.session_state.login_error:
                st.error(st.session_state.login_error)
                st.session_state.login_error = None # “ö–∞—Ç–µ–Ω—ñ –±—ñ—Ä —Ä–µ—Ç –∫”©—Ä—Å–µ—Ç—É

            if submitted_login:
                if not username_login or not password_login:
                    st.warning("–õ–æ–≥–∏–Ω –º–µ–Ω “õ“±–ø–∏—è —Å”©–∑–¥—ñ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑.")
                else:
                    db_gen = get_db_session()
                    db = next(db_gen)
                    try:
                        handle_login(username_login, password_login, db)
                    finally:
                        db.close()
                        
    with tab2:
        st.subheader("–ñ–∞“£–∞ –∞–∫–∫–∞—É–Ω—Ç “õ“±—Ä—É")
        with st.form("registration_form"):
            username_reg = st.text_input("–õ–æ–≥–∏–Ω —Ç–∞“£–¥–∞“£—ã–∑", key="reg_username")
            password_reg = st.text_input("“ö“±–ø–∏—è —Å”©–∑ –æ–π–ª–∞–ø —Ç–∞–±—ã“£—ã–∑", type="password", key="reg_password")
            password_confirm_reg = st.text_input("“ö“±–ø–∏—è —Å”©–∑–¥—ñ “õ–∞–π—Ç–∞–ª–∞“£—ã–∑", type="password", key="reg_password_confirm")
            submitted_registration = st.form_submit_button("–¢—ñ—Ä–∫–µ–ª—É")

            if st.session_state.register_message:
                msg_data = st.session_state.register_message
                if "success" in msg_data:
                    st.success(msg_data["success"])
                elif "error" in msg_data:
                    st.error(msg_data["error"])
                st.session_state.register_message = None # –•–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã –±—ñ—Ä —Ä–µ—Ç –∫”©—Ä—Å–µ—Ç—É


            if submitted_registration:
                if not username_reg or not password_reg or not password_confirm_reg:
                    st.warning("–ë–∞—Ä–ª—ã“õ ”©—Ä—ñ—Å—Ç–µ—Ä–¥—ñ —Ç–æ–ª—Ç—ã—Ä—ã“£—ã–∑.")
                else:
                    db_gen = get_db_session()
                    db = next(db_gen)
                    try:
                        handle_registration(username_reg, password_reg, password_confirm_reg, db)
                    finally:
                        db.close()